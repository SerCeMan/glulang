
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Oct 17 15:40:58 MSK 2015
//----------------------------------------------------

package ru.serce.glu.gluc.parser;

import java.util.ArrayList;
import java_cup.runtime.*;
import ru.serce.glu.gluc.ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Oct 17 15:40:58 MSK 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\002\003\000\002\002\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\010" +
    "\003\000\002\010\003\000\002\011\003\000\002\012\003" +
    "\000\002\014\003\000\002\014\003\000\002\013\003\000" +
    "\002\013\004\000\002\015\005\000\002\016\003\000\002" +
    "\016\005\000\002\017\003\000\002\017\005\000\002\020" +
    "\003\000\002\021\004\000\002\022\004\000\002\022\004" +
    "\000\002\023\006\000\002\023\005\000\002\024\003\000" +
    "\002\024\005\000\002\025\004\000\002\026\003\000\002" +
    "\027\005\000\002\027\004\000\002\030\003\000\002\030" +
    "\004\000\002\031\003\000\002\031\003\000\002\032\004" +
    "\000\002\033\004\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\003" +
    "\000\002\040\004\000\002\041\003\000\002\041\003\000" +
    "\002\042\007\000\002\043\011\000\002\044\011\000\002" +
    "\045\007\000\002\046\007\000\002\047\005\000\002\047" +
    "\004\000\002\050\003\000\002\050\005\000\002\050\003" +
    "\000\002\051\003\000\002\051\005\000\002\052\006\000" +
    "\002\052\005\000\002\053\003\000\002\053\003\000\002" +
    "\054\004\000\002\054\004\000\002\054\003\000\002\055" +
    "\003\000\002\055\004\000\002\056\003\000\002\056\005" +
    "\000\002\056\005\000\002\057\003\000\002\057\005\000" +
    "\002\057\005\000\002\060\003\000\002\060\005\000\002" +
    "\060\005\000\002\060\005\000\002\060\005\000\002\061" +
    "\003\000\002\061\005\000\002\061\005\000\002\062\003" +
    "\000\002\062\005\000\002\063\003\000\002\063\005\000" +
    "\002\064\003\000\002\064\003\000\002\065\005\000\002" +
    "\066\003\000\002\067\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\016\004\013\005\005\006\006\007\025\016" +
    "\022\043\007\001\002\000\004\002\254\001\002\000\004" +
    "\043\ufff2\001\002\000\004\043\ufff1\001\002\000\046\012" +
    "\000\013\000\014\000\015\000\023\000\024\000\025\000" +
    "\026\000\030\000\031\000\032\000\033\000\034\000\035" +
    "\000\036\000\037\000\040\000\043\000\001\002\000\020" +
    "\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\016\uffec\043" +
    "\uffec\001\002\000\004\043\007\001\002\000\004\043\ufff8" +
    "\001\002\000\004\043\ufff5\001\002\000\004\043\ufff6\001" +
    "\002\000\004\043\ufff7\001\002\000\020\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\016\uffee\043\uffee\001\002\000" +
    "\020\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed\016\uffed" +
    "\043\uffed\001\002\000\004\043\ufff4\001\002\000\020\002" +
    "\uffef\004\013\005\005\006\006\007\025\016\022\043\007" +
    "\001\002\000\004\043\007\001\002\000\004\010\026\001" +
    "\002\000\004\043\ufff3\001\002\000\004\043\ufff0\001\002" +
    "\000\030\004\013\005\005\006\006\007\025\010\026\011" +
    "\037\015\033\017\043\021\041\022\042\043\007\001\002" +
    "\000\020\002\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc\016" +
    "\uffdc\043\uffdc\001\002\000\020\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\016\uffe4\043\uffe4\001\002\000\030\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\015\uffd1" +
    "\017\uffd1\021\uffd1\022\uffd1\043\uffd1\001\002\000\004\015" +
    "\233\001\002\000\032\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\015\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\043\uffc8\001\002\000\004\015\uffc5\001\002\000\004" +
    "\015\uffc6\001\002\000\032\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\011\uffcb\015\uffcb\017\uffcb\020\uffcb\021\uffcb" +
    "\022\uffcb\043\uffcb\001\002\000\036\002\uffda\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\022\uffda\043\uffda\001\002\000" +
    "\032\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\015\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\043\uffc9\001" +
    "\002\000\004\012\230\001\002\000\032\012\100\015\225" +
    "\023\075\024\073\027\111\041\076\042\105\043\007\044" +
    "\107\045\067\046\113\047\115\001\002\000\004\012\175" +
    "\001\002\000\004\043\007\001\002\000\030\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\015\uffd0\017\uffd0" +
    "\021\uffd0\022\uffd0\043\uffd0\001\002\000\030\004\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\015\uffd3\017\uffd3" +
    "\021\uffd3\022\uffd3\043\uffd3\001\002\000\032\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\011\uffca\015\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\043\uffca\001\002\000\004\015" +
    "\164\001\002\000\010\012\063\040\062\043\ufff7\001\002" +
    "\000\030\004\013\005\005\006\006\007\025\010\026\011" +
    "\060\015\033\017\043\021\041\022\042\043\007\001\002" +
    "\000\032\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\015\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\043\uffcc" +
    "\001\002\000\030\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6\043\uffd6" +
    "\001\002\000\030\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\015\uffd7\017\uffd7\021\uffd7\022\uffd7\043\uffd7" +
    "\001\002\000\030\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\011\uffd2\015\uffd2\017\uffd2\021\uffd2\022\uffd2\043\uffd2" +
    "\001\002\000\030\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\015\uffd9\017\uffd9\021\uffd9\022\uffd9\043\uffd9" +
    "\001\002\000\036\002\uffdb\004\uffdb\005\uffdb\006\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\022\uffdb\043\uffdb\001\002\000\030\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\015\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\043\uffd8\001\002\000\030\012\uff9a\023" +
    "\uff9a\024\uff9a\027\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\001\002\000\032\012\100\013" +
    "\156\023\075\024\073\027\111\041\076\042\105\043\007" +
    "\044\107\045\067\046\113\047\115\001\002\000\030\012" +
    "\100\023\075\024\073\027\111\041\076\042\105\043\007" +
    "\044\107\045\067\046\113\047\115\001\002\000\040\013" +
    "\uffb1\014\uffb1\015\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\001\002\000\014\013\uff9f\014\uff9f\015\uff9f" +
    "\036\154\037\uff9f\001\002\000\040\013\ufffb\014\ufffb\015" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\001" +
    "\002\000\040\013\uffbb\014\uffbb\015\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\001\002\000\010\013\uff9c" +
    "\014\uff9c\015\uff9c\001\002\000\012\013\uff9d\014\uff9d\015" +
    "\uff9d\037\152\001\002\000\030\012\100\023\075\024\073" +
    "\027\111\041\076\042\105\043\007\044\107\045\067\046" +
    "\113\047\115\001\002\000\040\013\uffb6\014\uffb6\015\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\001\002" +
    "\000\030\012\100\023\075\024\073\027\111\041\076\042" +
    "\105\043\007\044\107\045\067\046\113\047\115\001\002" +
    "\000\040\013\ufffa\014\ufffa\015\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\001\002\000\040\013\ufffd\014" +
    "\ufffd\015\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\030\ufffd" +
    "\031\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\001\002\000\030\012\100\023\075\024\073\027\111" +
    "\041\076\042\105\043\007\044\107\045\067\046\113\047" +
    "\115\001\002\000\040\013\uffaf\014\uffaf\015\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\001\002\000\044" +
    "\012\063\013\uffb5\014\uffb5\015\uffb5\023\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\036\uffb5\037\uffb5\040\062\001\002\000\030\013" +
    "\uffa4\014\uffa4\015\uffa4\030\136\031\137\032\134\033\135" +
    "\034\uffa4\035\uffa4\036\uffa4\037\uffa4\001\002\000\020\013" +
    "\uffa1\014\uffa1\015\uffa1\034\132\035\131\036\uffa1\037\uffa1" +
    "\001\002\000\040\013\ufff9\014\ufff9\015\ufff9\023\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\001\002\000\040\013" +
    "\uffb2\014\uffb2\015\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\001\002\000\040\013\uffff\014\uffff\015\uffff" +
    "\023\uffff\024\uffff\025\uffff\026\uffff\030\uffff\031\uffff\032" +
    "\uffff\033\uffff\034\uffff\035\uffff\036\uffff\037\uffff\001\002" +
    "\000\034\013\uffa9\014\uffa9\015\uffa9\023\125\024\126\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\001\002\000\030\012\100\023\075\024\073\027" +
    "\111\041\076\042\105\043\007\044\107\045\067\046\113" +
    "\047\115\001\002\000\040\013\uffac\014\uffac\015\uffac\023" +
    "\uffac\024\uffac\025\117\026\120\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\036\uffac\037\uffac\001\002\000" +
    "\040\013\ufffe\014\ufffe\015\ufffe\023\ufffe\024\ufffe\025\ufffe" +
    "\026\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\001\002\000\040\013\uffbd\014\uffbd" +
    "\015\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\001\002\000\040\013\ufffc\014\ufffc\015\ufffc\023\ufffc\024" +
    "\ufffc\025\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\037\ufffc\001\002\000\010\013" +
    "\uff9b\014\uff9b\015\uff9b\001\002\000\030\012\100\023\075" +
    "\024\073\027\111\041\076\042\105\043\007\044\107\045" +
    "\067\046\113\047\115\001\002\000\030\012\100\023\075" +
    "\024\073\027\111\041\076\042\105\043\007\044\107\045" +
    "\067\046\113\047\115\001\002\000\040\013\uffae\014\uffae" +
    "\015\uffae\023\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031" +
    "\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\001\002\000\042\012\063\013\uffb5\014\uffb5\015\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\001\002\000" +
    "\040\013\uffad\014\uffad\015\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035" +
    "\uffad\036\uffad\037\uffad\001\002\000\040\013\uffb0\014\uffb0" +
    "\015\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\001\002\000\030\012\100\023\075\024\073\027\111\041" +
    "\076\042\105\043\007\044\107\045\067\046\113\047\115" +
    "\001\002\000\030\012\100\023\075\024\073\027\111\041" +
    "\076\042\105\043\007\044\107\045\067\046\113\047\115" +
    "\001\002\000\040\013\uffaa\014\uffaa\015\uffaa\023\uffaa\024" +
    "\uffaa\025\117\026\120\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\034\uffaa\035\uffaa\036\uffaa\037\uffaa\001\002\000\040\013" +
    "\uffab\014\uffab\015\uffab\023\uffab\024\uffab\025\117\026\120" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\001\002\000\030\012\100\023\075\024\073" +
    "\027\111\041\076\042\105\043\007\044\107\045\067\046" +
    "\113\047\115\001\002\000\030\012\100\023\075\024\073" +
    "\027\111\041\076\042\105\043\007\044\107\045\067\046" +
    "\113\047\115\001\002\000\030\013\uffa3\014\uffa3\015\uffa3" +
    "\030\136\031\137\032\134\033\135\034\uffa3\035\uffa3\036" +
    "\uffa3\037\uffa3\001\002\000\030\012\100\023\075\024\073" +
    "\027\111\041\076\042\105\043\007\044\107\045\067\046" +
    "\113\047\115\001\002\000\030\012\100\023\075\024\073" +
    "\027\111\041\076\042\105\043\007\044\107\045\067\046" +
    "\113\047\115\001\002\000\030\012\100\023\075\024\073" +
    "\027\111\041\076\042\105\043\007\044\107\045\067\046" +
    "\113\047\115\001\002\000\030\012\100\023\075\024\073" +
    "\027\111\041\076\042\105\043\007\044\107\045\067\046" +
    "\113\047\115\001\002\000\034\013\uffa7\014\uffa7\015\uffa7" +
    "\023\125\024\126\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\001\002\000\034\013\uffa8" +
    "\014\uffa8\015\uffa8\023\125\024\126\030\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\001\002" +
    "\000\034\013\uffa5\014\uffa5\015\uffa5\023\125\024\126\030" +
    "\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5" +
    "\037\uffa5\001\002\000\034\013\uffa6\014\uffa6\015\uffa6\023" +
    "\125\024\126\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\001\002\000\030\013\uffa2\014" +
    "\uffa2\015\uffa2\030\136\031\137\032\134\033\135\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\001\002\000\004\013\147\001" +
    "\002\000\010\013\uff99\014\uff99\015\uff99\001\002\000\040" +
    "\013\uffbc\014\uffbc\015\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\001\002\000\040\013\uffb4\014\uffb4\015" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\001" +
    "\002\000\040\013\uffb3\014\uffb3\015\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034" +
    "\uffb3\035\uffb3\036\uffb3\037\uffb3\001\002\000\030\012\100" +
    "\023\075\024\073\027\111\041\076\042\105\043\007\044" +
    "\107\045\067\046\113\047\115\001\002\000\014\013\uff9e" +
    "\014\uff9e\015\uff9e\036\154\037\uff9e\001\002\000\030\012" +
    "\100\023\075\024\073\027\111\041\076\042\105\043\007" +
    "\044\107\045\067\046\113\047\115\001\002\000\020\013" +
    "\uffa0\014\uffa0\015\uffa0\034\132\035\131\036\uffa0\037\uffa0" +
    "\001\002\000\040\013\uffb7\014\uffb7\015\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\001\002\000\006\013" +
    "\162\014\161\001\002\000\006\013\uffba\014\uffba\001\002" +
    "\000\030\012\100\023\075\024\073\027\111\041\076\042" +
    "\105\043\007\044\107\045\067\046\113\047\115\001\002" +
    "\000\040\013\uffb8\014\uffb8\015\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\001\002\000\006\013\uffb9\014" +
    "\uffb9\001\002\000\032\004\uffc7\005\uffc7\006\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\015\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\043\uffc7\001\002\000\006\014\173\015\uffd4\001\002" +
    "\000\012\013\uffe5\014\uffe5\015\uffe5\040\uffe5\001\002\000" +
    "\006\014\uffe9\015\uffe9\001\002\000\010\014\uffe7\015\uffe7" +
    "\040\171\001\002\000\030\012\100\023\075\024\073\027" +
    "\111\041\076\042\105\043\007\044\107\045\067\046\113" +
    "\047\115\001\002\000\006\014\uffe6\015\uffe6\001\002\000" +
    "\004\043\007\001\002\000\006\014\uffe8\015\uffe8\001\002" +
    "\000\030\012\100\023\075\024\073\027\111\041\076\042" +
    "\105\043\007\044\107\045\067\046\113\047\115\001\002" +
    "\000\004\013\177\001\002\000\016\010\026\015\033\017" +
    "\202\021\200\022\042\043\007\001\002\000\004\012\220" +
    "\001\002\000\004\020\uffcd\001\002\000\004\012\212\001" +
    "\002\000\032\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\015\uffd3\017\uffd3\020\uffcf\021\uffd3\022\uffd3\043" +
    "\uffd3\001\002\000\006\012\063\040\062\001\002\000\004" +
    "\020\uffce\001\002\000\030\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\011\uffc4\015\uffc4\017\uffc4\021\uffc4\022\uffc4" +
    "\043\uffc4\001\002\000\004\020\210\001\002\000\016\010" +
    "\026\015\033\017\043\021\041\022\042\043\007\001\002" +
    "\000\030\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\015\uffc3\017\uffc3\021\uffc3\022\uffc3\043\uffc3\001\002" +
    "\000\030\012\100\023\075\024\073\027\111\041\076\042" +
    "\105\043\007\044\107\045\067\046\113\047\115\001\002" +
    "\000\004\013\214\001\002\000\016\010\026\015\033\017" +
    "\202\021\200\022\042\043\007\001\002\000\004\020\216" +
    "\001\002\000\016\010\026\015\033\017\202\021\200\022" +
    "\042\043\007\001\002\000\004\020\uffc2\001\002\000\030" +
    "\012\100\023\075\024\073\027\111\041\076\042\105\043" +
    "\007\044\107\045\067\046\113\047\115\001\002\000\004" +
    "\013\222\001\002\000\016\010\026\015\033\017\202\021" +
    "\200\022\042\043\007\001\002\000\030\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\015\uffc1\017\uffc1\021" +
    "\uffc1\022\uffc1\043\uffc1\001\002\000\004\020\uffc0\001\002" +
    "\000\032\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011" +
    "\uffbe\015\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\043\uffbe" +
    "\001\002\000\004\015\227\001\002\000\032\004\uffbf\005" +
    "\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\015\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\043\uffbf\001\002\000\030\012" +
    "\100\023\075\024\073\027\111\041\076\042\105\043\007" +
    "\044\107\045\067\046\113\047\115\001\002\000\004\013" +
    "\232\001\002\000\016\010\026\015\033\017\043\021\041" +
    "\022\042\043\007\001\002\000\030\004\uffd5\005\uffd5\006" +
    "\uffd5\007\uffd5\010\uffd5\011\uffd5\015\uffd5\017\uffd5\021\uffd5" +
    "\022\uffd5\043\uffd5\001\002\000\004\010\uffe2\001\002\000" +
    "\004\012\236\001\002\000\016\004\013\005\005\006\006" +
    "\007\025\013\241\043\007\001\002\000\004\043\007\001" +
    "\002\000\006\013\244\014\243\001\002\000\004\010\uffe0" +
    "\001\002\000\006\013\uffdf\014\uffdf\001\002\000\014\004" +
    "\013\005\005\006\006\007\025\043\007\001\002\000\004" +
    "\010\uffe1\001\002\000\006\013\uffde\014\uffde\001\002\000" +
    "\006\013\uffdd\014\uffdd\001\002\000\020\002\uffeb\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\016\uffeb\043\uffeb\001\002\000" +
    "\006\014\173\015\253\001\002\000\004\010\uffe3\001\002" +
    "\000\012\012\236\014\uffe5\015\uffe5\040\uffe5\001\002\000" +
    "\020\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\016\uffea" +
    "\043\uffea\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\032\003\014\005\010\006\011\007\013\010" +
    "\017\011\023\012\003\013\020\014\007\015\015\021\016" +
    "\022\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\251\016\247\017\166\020\167\023\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\014\005\010\006\011\007\013\010\017" +
    "\011\023\014\246\015\015\021\016\022\022\001\001\000" +
    "\006\003\234\023\233\001\001\000\006\026\027\027\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\050\005\043\006\011\007\013\010\017\011\023\027\052" +
    "\030\051\031\056\032\054\033\031\034\053\036\045\037" +
    "\035\040\046\041\047\042\055\043\030\045\044\047\037" +
    "\052\033\065\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\002\076\003\101\004\113\050\073\052\067\053\064\054" +
    "\100\055\105\056\111\057\107\060\102\061\103\062\065" +
    "\063\071\064\145\065\070\067\225\001\001\000\002\001" +
    "\001\000\012\003\165\016\164\017\166\020\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\066\063\001\001\000\054\003\050" +
    "\005\043\006\011\007\013\010\017\011\023\027\052\031" +
    "\060\032\054\033\031\034\053\036\045\037\035\040\046" +
    "\041\047\042\055\043\030\045\044\047\037\052\033\065" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\076" +
    "\003\101\004\113\050\073\051\156\052\067\053\064\054" +
    "\100\055\105\056\111\057\107\060\102\061\103\062\065" +
    "\063\071\064\145\065\070\067\157\001\001\000\042\002" +
    "\076\003\101\004\113\050\073\052\067\053\064\054\100" +
    "\055\105\056\111\057\107\060\102\061\103\062\065\063" +
    "\071\064\115\065\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\076\003\121\004\113" +
    "\050\073\052\067\053\064\054\150\055\105\001\001\000" +
    "\002\001\001\000\022\002\076\003\121\004\113\050\073" +
    "\052\067\053\064\054\147\055\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\002\076\003\101\004\113" +
    "\050\073\052\067\053\064\054\100\055\105\056\111\057" +
    "\107\060\102\061\103\062\065\063\071\064\145\065\070" +
    "\067\144\001\001\000\002\001\001\000\004\066\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\076\003\121\004\113\050\073\052\067\053\064" +
    "\054\123\055\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\076\003\121\004\113\050\073\052\067\053" +
    "\064\054\122\055\105\001\001\000\022\002\076\003\121" +
    "\004\113\050\073\052\067\053\064\054\120\055\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\076\003\121\004\113\050" +
    "\073\052\067\053\064\054\100\055\105\056\127\001\001" +
    "\000\024\002\076\003\121\004\113\050\073\052\067\053" +
    "\064\054\100\055\105\056\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\076\003\121\004\113\050" +
    "\073\052\067\053\064\054\100\055\105\056\111\057\107" +
    "\060\143\001\001\000\030\002\076\003\121\004\113\050" +
    "\073\052\067\053\064\054\100\055\105\056\111\057\107" +
    "\060\132\001\001\000\002\001\001\000\026\002\076\003" +
    "\121\004\113\050\073\052\067\053\064\054\100\055\105" +
    "\056\111\057\142\001\001\000\026\002\076\003\121\004" +
    "\113\050\073\052\067\053\064\054\100\055\105\056\111" +
    "\057\141\001\001\000\026\002\076\003\121\004\113\050" +
    "\073\052\067\053\064\054\100\055\105\056\111\057\140" +
    "\001\001\000\026\002\076\003\121\004\113\050\073\052" +
    "\067\053\064\054\100\055\105\056\111\057\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\076\003\121\004\113\050\073\052\067" +
    "\053\064\054\100\055\105\056\111\057\107\060\102\061" +
    "\103\062\152\001\001\000\002\001\001\000\032\002\076" +
    "\003\121\004\113\050\073\052\067\053\064\054\100\055" +
    "\105\056\111\057\107\060\102\061\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\002\076\003\101\004\113\050\073\052\067" +
    "\053\064\054\100\055\105\056\111\057\107\060\102\061" +
    "\103\062\065\063\071\064\145\065\070\067\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\002\076\003\101\004\113\050\073\052" +
    "\067\053\064\054\100\055\105\056\111\057\107\060\102" +
    "\061\103\062\065\063\071\064\145\065\070\067\171\001" +
    "\001\000\002\001\001\000\010\003\165\017\173\020\167" +
    "\001\001\000\002\001\001\000\044\002\076\003\101\004" +
    "\113\050\073\052\067\053\064\054\100\055\105\056\111" +
    "\057\107\060\102\061\103\062\065\063\071\064\145\065" +
    "\070\067\175\001\001\000\002\001\001\000\042\003\203" +
    "\027\052\034\205\035\206\036\202\037\035\040\046\041" +
    "\047\042\055\043\030\044\204\045\044\046\200\047\037" +
    "\052\033\065\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\203\027\052\034\210\036\045\037\035" +
    "\040\046\041\047\042\055\043\030\045\044\047\037\052" +
    "\033\065\034\001\001\000\002\001\001\000\044\002\076" +
    "\003\101\004\113\050\073\052\067\053\064\054\100\055" +
    "\105\056\111\057\107\060\102\061\103\062\065\063\071" +
    "\064\145\065\070\067\212\001\001\000\002\001\001\000" +
    "\042\003\203\027\052\034\205\035\214\036\202\037\035" +
    "\040\046\041\047\042\055\043\030\044\204\045\044\046" +
    "\200\047\037\052\033\065\034\001\001\000\002\001\001" +
    "\000\042\003\203\027\052\034\210\035\216\036\202\037" +
    "\035\040\046\041\047\042\055\043\030\044\204\045\044" +
    "\046\200\047\037\052\033\065\034\001\001\000\002\001" +
    "\001\000\044\002\076\003\101\004\113\050\073\052\067" +
    "\053\064\054\100\055\105\056\111\057\107\060\102\061" +
    "\103\062\065\063\071\064\145\065\070\067\220\001\001" +
    "\000\002\001\001\000\042\003\203\027\052\034\222\035" +
    "\223\036\202\037\035\040\046\041\047\042\055\043\030" +
    "\044\204\045\044\046\200\047\037\052\033\065\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\002\076\003" +
    "\101\004\113\050\073\052\067\053\064\054\100\055\105" +
    "\056\111\057\107\060\102\061\103\062\065\063\071\064" +
    "\145\065\070\067\230\001\001\000\002\001\001\000\034" +
    "\003\203\027\052\034\222\036\045\037\035\040\046\041" +
    "\047\042\055\043\030\045\044\047\037\052\033\065\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\014\005\236\006\011\007\013\010\017" +
    "\011\023\024\237\025\241\001\001\000\006\003\165\020" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\003\014\005\236\006\011\007\013\010" +
    "\017\011\023\025\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    protected CompilationUnit root;

    void setRoot(CompilationUnit cu) { this.root = cu; }

    public CompilationUnit getRoot() { return this.root; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expression ::= AssignmentExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expression",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // AssignmentOperator ::= EQUALS 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.ASSIGN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Assignment ::= Identifier AssignmentOperator AssignmentExpression 
            {
              ASTNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode ls = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode op = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode rs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	       RESULT = op;
	       RESULT.addChild(ls);
	       RESULT.addChild(rs);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Assignment",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // AssignmentExpression ::= Assignment 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // AssignmentExpression ::= ConditionalOrExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ConditionalOrExpression ::= ConditionalOrExpression OP_OR ConditionalAndExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.BOOLEAN_OR);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ConditionalOrExpression ::= ConditionalAndExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ConditionalAndExpression ::= ConditionalAndExpression OP_AND EqualityExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.BOOLEAN_AND);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ConditionalAndExpression ::= EqualityExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EqualityExpression ::= EqualityExpression OP_NE RelationalExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.NOT_EQUAL);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EqualityExpression ::= EqualityExpression OP_EQ RelationalExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.EQUAL);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EqualityExpression ::= RelationalExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EqualityExpression",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RelationalExpression ::= RelationalExpression OP_GE AdditiveExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.GREATER_THAN_OR_EQUAL);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RelationalExpression ::= RelationalExpression OP_LE AdditiveExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.LESS_THAN_OR_EQUAL);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RelationalExpression ::= RelationalExpression OP_GT AdditiveExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.GREATER_THAN);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RelationalExpression ::= RelationalExpression OP_LT AdditiveExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.LESS_THAN);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RelationalExpression ::= AdditiveExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RelationalExpression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AdditiveExpression ::= AdditiveExpression MINUSOP MultiplicativeExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.SUBTRACTION);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AdditiveExpression ::= AdditiveExpression PLUSOP MultiplicativeExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.ADDITION);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AdditiveExpression ::= MultiplicativeExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MultiplicativeExpression ::= MultiplicativeExpression SLASH UnaryExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.DIVISION);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // MultiplicativeExpression ::= MultiplicativeExpression ASTERISK UnaryExpression 
            {
              ASTNode RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode le = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode re = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.MULTIPLICATION);
           RESULT.addChild(le);
           RESULT.addChild(re);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MultiplicativeExpression ::= UnaryExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UnaryExpressionNotPlusMinus ::= BANG UnaryExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.BOOLEAN_NOT);
           RESULT.addChild(e);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpressionNotPlusMinus",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // UnaryExpressionNotPlusMinus ::= PostfixExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpressionNotPlusMinus",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // UnaryExpression ::= UnaryExpressionNotPlusMinus 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // UnaryExpression ::= MINUSOP UnaryExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.UNARY_MINUS);
           RESULT.addChild(e);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // UnaryExpression ::= PLUSOP UnaryExpression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.UNARY_PLUS);
           RESULT.addChild(e);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnaryExpression",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PostfixExpression ::= Identifier 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode n = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	      RESULT = new BaseASTNode(NodeType.VAR_USE);
	      RESULT.addChild(n);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PostfixExpression ::= Primary 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PostfixExpression",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // MethodInvocation ::= Identifier LPAREN RPAREN 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode n = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
           RESULT.addChild(n);
           RESULT.addChild(new BaseASTNode(NodeType.ARGUMENTS));
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodInvocation",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MethodInvocation ::= Identifier LPAREN ArgumentList RPAREN 
            {
              ASTNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode n = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode al = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_ACCESS);
           RESULT.addChild(n);
           RESULT.addChild(al);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodInvocation",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              ASTNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode al = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = al;
           RESULT.addChild(e);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ArgumentList ::= Expression 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.ARGUMENTS);
           RESULT.addChild(e);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Primary ::= MethodInvocation 
            {
              ASTNode RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode m = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Primary ::= LPAREN Expression RPAREN 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Primary ::= Literal 
            {
              ASTNode RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode l = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = l; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Primary",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ReturnStatement ::= RETURN SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ReturnStatement ::= RETURN Expression SEMICOLON 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           RESULT = new BaseASTNode(NodeType.RETURN_STATEMENT);
           RESULT.addChild(e);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReturnStatement",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WhileStatementNoShortIf ::= WHILE LPAREN Expression RPAREN StatementNoShortIf 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.WHILE_STATEMENT);
           RESULT.addChild(e);
           RESULT.addChild(s);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStatementNoShortIf",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WhileStatement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.WHILE_STATEMENT);
           RESULT.addChild(e);
           RESULT.addChild(s);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStatement",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IfThenElseStatementNoShortIf ::= IF LPAREN Expression RPAREN StatementNoShortIf ELSE StatementNoShortIf 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode th = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode el = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
           RESULT.addChild(e);
           RESULT.addChild(th);
           RESULT.addChild(el);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfThenElseStatementNoShortIf",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IfThenElseStatement ::= IF LPAREN Expression RPAREN StatementNoShortIf ELSE Statement 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int thleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int thright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode th = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode el = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
           RESULT.addChild(e);
           RESULT.addChild(th);
           RESULT.addChild(el);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfThenElseStatement",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IfThenStatement ::= IF LPAREN Expression RPAREN Statement 
            {
              ASTNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode e = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.IF_STATEMENT);
           RESULT.addChild(e);
           RESULT.addChild(s);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfThenStatement",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementExpression ::= MethodInvocation 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementExpression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // StatementExpression ::= Assignment 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementExpression",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpressionStatement ::= StatementExpression SEMICOLON 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           RESULT = new BaseASTNode(NodeType.EXPRESSION_STATEMENT);
           RESULT.addChild(s);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EmptyStatement ::= SEMICOLON 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.EMPTY_STATEMENT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EmptyStatement",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // StatementWithoutTrailingSubstatement ::= ReturnStatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementWithoutTrailingSubstatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StatementWithoutTrailingSubstatement ::= ExpressionStatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementWithoutTrailingSubstatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementWithoutTrailingSubstatement ::= EmptyStatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementWithoutTrailingSubstatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementWithoutTrailingSubstatement ::= Block 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementWithoutTrailingSubstatement",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementNoShortIf ::= WhileStatementNoShortIf 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementNoShortIf",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementNoShortIf ::= IfThenElseStatementNoShortIf 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementNoShortIf",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StatementNoShortIf ::= StatementWithoutTrailingSubstatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatementNoShortIf",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Statement ::= WhileStatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Statement ::= IfThenElseStatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Statement ::= IfThenStatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Statement ::= StatementWithoutTrailingSubstatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LocalVariableDeclaration ::= Type VariableDeclarators 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BaseASTNode(NodeType.LOCAL_VAR_DECLARATION);
            RESULT.addChild(t);
            RESULT.addChild(d);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclaration",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LocalVariableDeclarationStatement ::= LocalVariableDeclaration SEMICOLON 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationStatement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BlockStatement ::= Statement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BlockStatement ::= LocalVariableDeclarationStatement 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode s = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStatement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BlockStatements ::= BlockStatements BlockStatement 
            {
              ASTNode RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode bs = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	       RESULT = bs;
	       RESULT.addChild(b);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStatements",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BlockStatements ::= BlockStatement 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	       RESULT = new BaseASTNode(NodeType.BLOCK);
	       RESULT.addChild(b);
	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BlockStatements",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Block ::= LBRACE RBRACE 
            {
              ASTNode RESULT =null;
		 RESULT = new BaseASTNode(NodeType.BLOCK); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Block ::= LBRACE BlockStatements RBRACE 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Block",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // MethodBody ::= Block 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodBody",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FormalParameter ::= Type VariableDeclaratorId 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.PARAMETER);
           RESULT.addChild(v);
           RESULT.addChild(t);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameter",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FormalParameterList ::= FormalParameterList COMMA FormalParameter 
            {
              ASTNode RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode pl = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = pl;
           RESULT.addChild(p);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FormalParameterList ::= FormalParameter 
            {
              ASTNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.PARAMETERS);
           RESULT.addChild(p);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FormalParameterList",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MethodDeclarator ::= Identifier LPAREN RPAREN 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           RESULT.addChild(i);
           RESULT.addChild(new BaseASTNode(NodeType.PARAMETERS));
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MethodDeclarator ::= Identifier LPAREN FormalParameterList RPAREN 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode p = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
           RESULT = new BaseASTNode(NodeType.METHOD_DECLARATION);
           RESULT.addChild(i);
           RESULT.addChild(p);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MethodHeader ::= VOID MethodDeclarator 
            {
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = d;
         RESULT.addChild(new TypeNode(NodeType.VOID, PrimitiveType.VOID));
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodHeader",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MethodHeader ::= Type MethodDeclarator 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = d;
         RESULT.addChild(t);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodHeader",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MethodDeclaration ::= MethodHeader MethodBody 
            {
              ASTNode RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode h = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = h;
           RESULT.addChild(b);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VariableDeclaratorId ::= Identifier 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         RESULT = new BaseASTNode(NodeType.VARIABLE_DECLARATION);
         RESULT.addChild(i);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclaratorId",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VariableDeclarator ::= VariableDeclaratorId EQUALS Expression 
            {
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode i = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = d;
           RESULT.addChild(i);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VariableDeclarator ::= VariableDeclaratorId 
            {
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarator",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator 
            {
              ASTNode RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode ds = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = ds;
           ds.addChild(d);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarators",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VariableDeclarators ::= VariableDeclarator 
            {
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
           RESULT = new BaseASTNode(NodeType.VARIABLE_DECLARATIONS);
           RESULT.addChild(d);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VariableDeclarators",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldDeclaration ::= Type VariableDeclarators SEMICOLON 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode v = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
         RESULT = new BaseASTNode(NodeType.FIELD_DECLARATION);
         RESULT.addChild(t);
         RESULT.addChild(v);
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // UnitDeclarations ::= UnitDeclarations UnitDeclaration 
            {
              ASTNode RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode ds = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = ds;
            RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnitDeclarations",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // UnitDeclarations ::= UnitDeclaration 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             RESULT = new BaseASTNode(NodeType.DECLARATIONS);
             RESULT.addChild(t);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnitDeclarations",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // UnitDeclaration ::= MethodDeclaration 
            {
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnitDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // UnitDeclaration ::= FieldDeclaration 
            {
              ASTNode RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode d = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("UnitDeclaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CompilationUnit ::= UnitDeclarations 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
             CompilationUnit cu = new CompilationUnit();
             cu.addChild(t);
             parser.setRoot(cu);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FloatingPointType ::= DOUBLE 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.DOUBLE_TYPE, PrimitiveType.DOUBLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FloatingPointType",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IntegralType ::= CHAR 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.CHAR_TYPE, PrimitiveType.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegralType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IntegralType ::= INT 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.INT_TYPE, PrimitiveType.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IntegralType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NumericType ::= FloatingPointType 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumericType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NumericType ::= IntegralType 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NumericType",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PrimitiveType ::= BOOLEAN 
            {
              ASTNode RESULT =null;
		 RESULT = new TypeNode(NodeType.BOOLEAN_TYPE, PrimitiveType.BOOLEAN); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PrimitiveType ::= NumericType 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PrimitiveType",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= Identifier 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= PrimitiveType 
            {
              ASTNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode t = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = t; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BooleanLiteral ::= FALSE 
            {
              ASTNode RESULT =null;
		 RESULT = new BooleanLiteralNode(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiteral",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BooleanLiteral ::= TRUE 
            {
              ASTNode RESULT =null;
		 RESULT = new BooleanLiteralNode(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BooleanLiteral",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Literal ::= STRING_LIT 
            {
              ASTNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringLiteralNode(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Literal ::= CHAR_LIT 
            {
              ASTNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CharLiteralNode(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Literal ::= BooleanLiteral 
            {
              ASTNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ASTNode b = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Literal ::= FLOAT_LIT 
            {
              ASTNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatLiteralNode(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Literal ::= INT_LIT 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerLiteralNode(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Literal",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Identifier ::= IDENTIFIER 
            {
              ASTNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Identifier",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ASTNode start_val = (ASTNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

